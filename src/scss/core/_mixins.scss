
/*
 * $Useful functions
 */
 @function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}


/*
 * $Blocks
 */
@mixin pos($type, $top, $right, $bottom, $left){
  @if  $type == "r"
    or $type == "a"
    or $type == "f" {
  
      @if      $type == "r" { position: relative; }
      @else if $type == "a" { position: absolute; }
      @else if $type == "f" { position: fixed; }
      
      @if $top    != "x" { top: $top; }
      @if $right  != "x" { right: $right; }
      @if $bottom != "x" { bottom: $bottom; }
      @if $left   != "x" { left: $left; }
  }
  @else {
    @warn "'#{$type}' is not a valid position.";
  }
}
@mixin rem($property, $size){
  #{$property}: $size;
  #{$property}: calculateRem($size);
}


/*
 * $Breakpoints
 */
@mixin bp-large {
  @media only screen and (max-width: $bp-large) {
    @content;
  }
}
@mixin bp-medium {
  @media only screen and (max-width: $bp-medium) {
    @content;
  }
}
@mixin bp-small {
  @media only screen and (max-width: $bp-small) {
    @content;
  }
}


/*
 * $Typography
 */
@mixin fontFace($fontName, $fontPath){
  @font-face {
    font-family: $fontName;
    src: url($fontPath + '.eot');
    src: url($fontPath + '.ttf') format('truetype'),
         url($fontPath + '.woff') format('woff'),
         url($fontPath + '.eot?#iefix') format('embedded-opentype'),
         url($fontPath + '.svg') format('svg');
    font-weight: normal;
    font-style: normal;
  }
}
@mixin fz($size, $lh) {
  font-size: $size;
  font-size: calculateRem($size);
  line-height: $lh;
}
@mixin ellipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}


/*
 * $Colors
 */
@function RGBAblack($opacity){
  @return rgba(0,0,0, $opacity);
}
@function RGBAwhite($opacity){
  @return rgba(0,0,0, $opacity);
}
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie);
}

